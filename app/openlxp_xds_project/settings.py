"""
Django settings for openlxp_xds_project project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import datetime
import mimetypes
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY_VAL')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

mimetypes.add_type("text/css", ".css", True)

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'health_check', 
    'rest_framework',
    'rest_framework.authtoken',
    'openlxp_notifications',
    'social_django',
    'openlxp_authentication',
    'xds_api',
    'core',
    'es_api',
    'users',
    'configurations',
    'notifications',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'openlxp_xds_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openlxp_xds_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'mysql.connector.django',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': 3306,
        'OPTIONS': {
            'charset': 'utf8mb4',
        }
    },
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'users.models.NumberValidator',
    },
    {
        'NAME': 'users.models.UppercaseValidator',
    },
    {
        'NAME': 'users.models.LowercaseValidator',
    },
    {
        'NAME': 'users.models.SymbolValidator',
    },

]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
LOG_PATH = os.environ.get('LOG_PATH')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'loggers': {
        'dict_config_logger': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simpleRe',
        },
    },

    'formatters': {
        'simpleRe': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        }
    }
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_DOMAIN = '.deloitteopenlxp.com'
CSRF_TRUSTED_ORIGINS = ['https://localhost, https://dev-xds2-admin.deloitteopenlxp.com', 'https://dev-xds2.deloitteopenlxp.com', 'https://dev-xds-admin.deloitteopenlxp.com', 'https://dev-xds.deloitteopenlxp.com', 'https://*.deloitteopenlxp.com' ]
# CSRF_COOKIE_DOMAIN = 'http://localhost'
# CSRF_TRUSTED_ORIGINS = ['https://localhost', ]

# SECURE_SSL_REDIRECT = True
# SECURE_REDIRECT_EXEMPT = ['health/', 'api/health/']

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'users.XDSUser'

# openlxp_authentication settings openlxp_authentication documentation:
# https://github.com/OpenLXP/openlxp-authentication#readme
# social_django documentation:
# https://python-social-auth.readthedocs.io/en/latest/index.html
# SOCIAL_AUTH_STRATEGY = 'openlxp_authentication.models.SAMLDBStrategy'
JSONFIELD_ENABLED = True
USER_MODEL = 'users.XDSUser'
SESSION_EXPIRATION = True

if os.environ.get('LOGIN_REDIRECT_URL') is not None:
    LOGIN_REDIRECT_URL = os.environ.get('LOGIN_REDIRECT_URL')

if os.environ.get('OVERIDE_HOST') is not None:
    OVERIDE_HOST = os.environ.get('OVERIDE_HOST')
    BAD_HOST = os.environ.get('BAD_HOST')

if os.environ.get('STRATEGY') is not None:
    SOCIAL_AUTH_STRATEGY = os.environ.get('STRATEGY')

SP_ENTITY_ID = os.environ.get('ENTITY_ID')

SP_PUBLIC_CERT = os.environ.get('SP_PUBLIC_CERT')
SP_PRIVATE_KEY = os.environ.get('SP_PRIVATE_KEY')
ORG_INFO = {
    "en-US": {
        "name": "example",
        "displayname": "Example Inc.",
        "url": "http://localhost",
    }
}
TECHNICAL_CONTACT = {
    "givenName": "Tech Person",
    "emailAddress": "technical@localhost.com"
}
SUPPORT_CONTACT = {
    "givenName": "Support Person",
    "emailAddress": "support@localhost.com",
}
USER_ATTRIBUTES = [
    "user_permanent_id",
    "first_name",
    "last_name",
    "email"
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'openlxp_authentication.models.SAMLDBAuth',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'users.models.PermissionsChecker',
    ]
}

EMAIL_BACKEND = 'django_ses.SESBackend'


# Django-notifications package settings
DJANGO_NOTIFICATIONS_CONFIG = {
    'USE_JSONFIELD': True,
}

# when notifications should be automatically deleted, should be days or greater
NOTIFICATIONS_EXPIRE_AFTER = datetime.timedelta(days=30)

DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880

# xAPI Statement Forwarding Settings

# whether to allow anonymous xAPI statement forwarding
XAPI_ALLOW_ANON = os.getenv('XAPI_ALLOW_ANON', 'true').lower() == 'true'

# mbox email to use for the anonymous user
XAPI_ANON_MBOX = os.getenv('XAPI_ANON_MBOX', 'anonymous@example.com')

# toggle setting actor from JWT
XAPI_USE_JWT = os.getenv('XAPI_USE_JWT', 'false').lower() == 'true'

# Set $.actor.account.homePage on statements.
XAPI_ACTOR_ACCOUNT_HOMEPAGE = os.environ.get('XAPI_ACTOR_ACCOUNT_HOMEPAGE',
                                             'https://example.com')
# Define fields from JWT to use for $.actor.account.name on statements in
# descending order of preference.
XAPI_ACTOR_ACCOUNT_NAME_JWT_FIELDS = [
    field.strip()
    for field in os.environ.get('XAPI_ACTOR_ACCOUNT_NAME_JWT_FIELDS', 'activecac,preferred_username').split(',')
]


# Accepts regex arguments
OPEN_ENDPOINTS = [
    "/api/auth/register",
    "/api/auth/login",
    "/api/auth/logout",
    "/api/auth/validate",
    "/api/ui-configuration/",
    "/es-api/filter-search/",
    "/es-api/more-like-this/[a-zA-Z0-9]+/",
    "/es-api/",
    "/es-api/suggest/",
    "/es-api/derived-from/",
    "/es-api/teaches/",
    "/api/experiences/[a-zA-Z0-9]+/",
    "/api/spotlight-courses",
    "/es-api/similar-courses/[a-zA-Z0-9]+/",
]

if XAPI_ALLOW_ANON and not XAPI_USE_JWT:
    OPEN_ENDPOINTS.append("/api/statements")
