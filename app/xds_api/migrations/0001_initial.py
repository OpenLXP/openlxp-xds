# Generated by Django 3.2.9 on 2021-11-08 20:26
from django.contrib.auth.management import create_permissions
from django.db import migrations
import logging

GROUPS = ['System Operator', 'Experience Owner', 'Experience Manager',
          'Experience Facilitator', 'Experience Participant']
MODELS = ['course spotlight', 'experience', 'xds configuration',
          'xdsui configuration', 'search sort option', 'search filter',
          'interest list', 'course information mapping',
          'course detail highlight', 'saved filter']
PERMISSIONS = ['view', ]


def forwards_func(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, verbosity=0)
        app_config.models_module = None

    for group in GROUPS:
        new_group, created = Group.objects.get_or_create(name=group)

        for model in MODELS:
            for permission in PERMISSIONS:
                name = 'Can {} {}'.format(permission, model)
                print("Creating {}".format(name))
                try:
                    model_add_perm = Permission.objects.get(name=name)
                except Permission.DoesNotExist:
                    logging.warning("Permission not found with name '{}'.".
                                    format(name))
                    continue

                new_group.permissions.add(model_add_perm)

    print("Created default group and permissions.")


def reverse_func(apps, schema_editor):
    # forwards_func() creates two Country instances,
    # so reverse_func() should delete them.
    Group = apps.get_model('auth', 'Group')
    # db_alias = schema_editor.connection.alias
    Group.objects.filter(
        name__in=GROUPS
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
